// <auto-generated />
using System;
using Inheritance_Mapping.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Inheritance_Mapping.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("GuestSequence");

            modelBuilder.Entity("Inheritance_Mapping.Models.Guest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [GuestSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Inheritance_Mapping.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Inheritance_Mapping.Models.FrequentGuest", b =>
                {
                    b.HasBaseType("Inheritance_Mapping.Models.Guest");

                    b.Property<DateTime>("LastStayDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoyaltyPoints")
                        .HasColumnType("int");

                    b.Property<int>("MembershipLevel")
                        .HasColumnType("int");

                    b.ToTable("FrequentGuests", (string)null);
                });

            modelBuilder.Entity("Inheritance_Mapping.Models.VIPGuest", b =>
                {
                    b.HasBaseType("Inheritance_Mapping.Models.Guest");

                    b.Property<string>("VipCardNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasIndex("VipCardNumber")
                        .IsUnique()
                        .HasFilter("[VipCardNumber] IS NOT NULL");

                    b.ToTable("VIPGuests", (string)null);
                });

            modelBuilder.Entity("Inheritance_Mapping.Models.Reservation", b =>
                {
                    b.HasOne("Inheritance_Mapping.Models.Guest", "Guest")
                        .WithMany("Reservations")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("Inheritance_Mapping.Models.Guest", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
